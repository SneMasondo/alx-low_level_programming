#include <stdarg.h>
#include <unistd.h>

int _printf(const char *format, ...)
{
    va_list args;  // Declare va_list to hold the variable arguments
    int count = 0; // This will hold the number of characters printed

    va_start(args, format);  // Initialize va_list with the last known argument (format)

    // Loop through each character in the format string
    for (int i = 0; format && format[i] != '\0'; i++)
    {
        if (format[i] == '%')  // If we find a format specifier
        {
            i++;  // Skip the '%' character
            switch (format[i])  // Check the next character for the type of specifier
            {
                case 'c':  // Character
                    write(1, &((char[]){va_arg(args, int)}), 1);  // Print the character
                    count++;
                    break;
                case 's':  // String
                    {
                        char *str = va_arg(args, char *);  // Get the string
                        if (str == NULL)
                            str = "(null)";  // Handle NULL strings
                        for (int j = 0; str[j] != '\0'; j++)  // Print each character of the string
                        {
                            write(1, &str[j], 1);
                            count++;
                        }
                    }
                    break;
                case '%':  // Literal '%'
                    write(1, "%", 1);
                    count++;
                    break;
                default:
                    write(1, "%", 1);  // If an unknown specifier, print '%'
                    write(1, &format[i], 1);
                    count += 2;  // Account for printing the '%' and the next character
                    break;
            }
        }
        else
        {
            write(1, &format[i], 1);  // Print normal characters
            count++;
        }
    }

    va_end(args);  // Clean up the va_list
    return count;  // Return the total number of printed characters
}

